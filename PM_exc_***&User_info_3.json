{
	"info": {
		"_postman_id": "ac6e84fe-a319-40ca-9379-73aca1f8636d",
		"name": "december21",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "second",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/",
					"host": [
						"{{url}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/get_method?name={{name}}&age={{age}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3",
							"",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"pm.test(\"parse response body json\", function () {",
							"    let post_form_data = pm.response.json();",
							"});",
							"",
							"//4. Проверить, что name в ответе равно name s request(name вбить руками.)",
							"pm.test(\"Your name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Assyelle\");",
							"});",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Your age\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.age).to.eql(\"35\");",
							"});",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Your salary\", function () {",
							"    var jsonData = pm.response.json();",
							"    var salary = request.data;",
							"    pm.expect(jsonData.salary).to.eql(10000);",
							"    console.log(\"test === \" +  jsonData.salary);",
							"});",
							"",
							"//7. Спарсить request.",
							"pm.test(\"parse request\", function () {",
							"    let post_form_data = request.data;",
							"});",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"    var jsonData = pm.response.json();",
							"    var name1 = jsonData.name;",
							"    var name2 = request.data.name;",
							"pm.test(\"check name from request\", function () {",
							"    pm.expect(jsonData.name).to.eql(request.data.name);    ",
							"});",
							"console.log(\"testerik ===== \" , name2); ",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"    var jsonData = pm.response.json();",
							"    var age1 = jsonData.age;",
							"    var age2 = request.data.age;",
							"pm.test(\"Check age from request\", function () {",
							"        pm.expect(jsonData.age).to.eql(request.data.age);",
							"});",
							"console.log(\"testerik === \", age2);",
							"",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"    var jsonData = pm.response.json();",
							"    var salary1 = jsonData.salary;",
							"    var salary2 = request.data.salary;",
							"pm.test(\"Check salary from request\", function () {",
							"        pm.expect(jsonData.salary).to.eql(request.data.salary);",
							"});",
							"console.log(\"testerik === \", salary2);",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							"var jsonData = pm.response.json();",
							"var family_1 = jsonData.family;",
							"console.log(\"семья === \", family_1);",
							"//или",
							"console.log(\"семья === \", jsonData.family);",
							"",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"//А, в 12-м нужно будет достать из этой переменной сэлари_1_5 и сравнить со значением основной зп как в предыдущих пунктах, только значение основной зп нужно умножить на 4",
							"",
							"    var jsonData = pm.response.json();",
							"    var salary1 = jsonData.salary;",
							"    var salary2 = request.data.salary * 4;",
							"pm.test(\"Check age from request\", function () {",
							"        pm.expect(jsonData.salary).to.eql(request.data.salary * 4);",
							"});",
							"console.log(\"testerik === \", salary2);",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_1?name={{name}}&age={{age}}&weight=48",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "weight",
							"value": "48"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//HW_2 #3",
							"// http://162.55.220.72:5005/object_info_3",
							"// 1. Отправить запрос.",
							"",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var resp_name = jsonData.name;",
							"var resp_age = jsonData.age;",
							"var resp_sal_10000 = jsonData.salary;",
							"",
							"let get_req_params = pm.request.url.query.toObject();",
							"let get_req_name = get_req_params.name;",
							"let get_req_age = get_req_params.age;",
							"let get_req_sal_10000 = get_req_params.salary;",
							"",
							"//let get_params_name = pm.request.url.query.toObject(\"name\")",
							"",
							"// 3. Спарсить response body в json.",
							"//Это и спарсить json без теста",
							"    //let jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"//Это и спарсить request без теста",
							"    //let get_params = pm.request.url.query.toObject()",
							"    ",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"request name\", function () {",
							"    pm.expect(resp_name).to.eql(get_req_name);",
							"});",
							"console.log(\"name === \", resp_name);",
							"console.log(\"namik === \", get_req_name);",
							"",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"    //var jsonData = pm.response.json(); //Если один раз спарсили jsonData вне теста, то нет необходимости повтора - поэтому отключен.",
							"    var age2 = pm.request.url.query.get(\"age\");",
							"pm.test(\"age from request\", function () {",
							"    pm.expect(resp_age).to.eql(get_req_age);",
							"});",
							"console.log(\"agik === \", resp_age);",
							"console.log(\"ageke === \", get_req_age);",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"salary from request\", function (){",
							"    pm.expect(+resp_sal_10000).to.eql(+get_req_sal_10000);",
							"});",
							"console.log(\"salary === \", resp_sal_10000);",
							"console.log(\"salary === \", get_req_sal_10000);",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"    //var jsonData = pm.response.json();",
							"    var family1 = jsonData.family;",
							"console.log(\"fam === \", family1);",
							"//или",
							"console.log(\"fam === \", jsonData.family);",
							"",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog contains name\", function () {",
							"     pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"    });",
							"console.log(\"dog to hv name === \", jsonData.family.pets.dog.name);",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog contains age\", function () {",
							"     pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"    });",
							"console.log(\"dog to hv age === \", jsonData.family.pets.dog.age);",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"    var dog_name = jsonData.family.pets.dog.name;",
							"pm.test(\"Name is Luky\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\"); ",
							" });",
							"console.log(\"name luky === \", jsonData.family.pets.dog.name);",
							"console.log(\"lukya === \", (\"Luky\"));",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Age is 4\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});",
							"console.log(\"Luky age = 4 === \", 4);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"",
							"",
							"// 3. Спарсить response body в json.",
							"    var jsonData = pm.response.json();",
							"",
							"    var resp_name = jsonData.name;",
							"    var resp_age = jsonData.age;",
							"    var resp_salary_10000 = jsonData.salary[0];",
							"    var resp_salary_20000 = jsonData.salary[1];",
							"    var resp_salary_30000 = jsonData.salary[2];",
							"",
							"// 4. Спарсить request.",
							"let get_req_params = pm.request.url.query.toObject();",
							"",
							"let get_req_name = get_req_params.name;",
							"let get_req_age = get_req_params.age;",
							"let get_req_sal = get_req_params.salary;",
							"//let get_req_sal_20000 = get_req_params.salary;",
							"//let get_req_sal_30000 = get_req_params.salary;",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"request name\", function () {",
							"    pm.expect(resp_name).to.eql(get_req_name);",
							"});",
							"    console.log(\"name === \", resp_name);",
							"    console.log(\"name === \", get_req_name);",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"request age\", function () {",
							"    pm.expect(+resp_age).to.eql(+get_req_age);",
							"});",
							"    console.log(\"age === \", get_req_age);",
							"    console.log(\"age === \", resp_age);",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"    var salary1 = pm.request.url.query.get(\"salary\");",
							"console.log(\"sal === \", salary1);",
							"//или",
							"console.log(\"sal === \", pm.request.url.query.get(\"salary\"));",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"    var salary1 = jsonData.salary;",
							"console.log(\"sal === \", salary1);",
							"//или",
							"console.log(\"sal === \", (jsonData.salary));",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"    var salary0 = jsonData.salary;",
							"pm.test(\"salary0\", function () {",
							"pm.expect(jsonData.salary[0]).to.eql(10000);",
							"});",
							"console.log(\"kaku === \", jsonData.salary[0]);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"pm.test(\"salary1\", function () {",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql(20000);",
							"});",
							"//еще один вариант через parseInt:",
							"pm.test(\"salary1\", function () {",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(20000)",
							"    });",
							"//и 3-вариант через плюсик:",
							"pm.test(\"salary1\", function () {",
							"    pm.expect(+(jsonData.salary[1])).to.eql(20000);",
							"});",
							"console.log(\"kaku1 === \", jsonData.salary[1]);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"pm.test(\"salary2\", function () {",
							"    pm.expect(jsonData.salary[2]).to.eql(\"30000\");",
							"});",
							"console.log(\"kaku2 === \", jsonData.salary[2]);",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"request salary0\", function () {",
							"    pm.expect(parseInt(resp_salary_10000)).to.eql(parseInt(get_req_sal));",
							"    //pm.expect(+resp_salary_10000).to.eql(+get_req_sal_10000);",
							"});",
							"console.log(\"nameasha === \", resp_salary_10000);",
							"console.log(\"nameapu === \", get_req_sal);",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"request salary1\", function () {",
							"    pm.expect(+resp_salary_20000).to.eql(+get_req_sal * 2);",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"request salary2\", function () {",
							"    pm.expect(+resp_salary_30000).to.eql(+get_req_sal * 3);",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"// Открыть переменную, под Variable написать name, под Initial value написать Assyelle (под Current value автоматом скопируется Assyelle).",
							"",
							"// 16. Создать в окружении переменную age",
							"//Открыть переменную, под Variable написать age, под Initial value написать 35 (под Current value автоматом скопируется 35).",
							"",
							"// 17. Создать в окружении переменную salary",
							"//Открыть переменную, под Variable написать salary, под Initial value написать 10000 (под Current value автоматом скопируется 10000).",
							"",
							"// 18. Передать в окружение переменную name",
							"// В адресной строке или в Params вместо значения Assyelle открыть две фигурные скобки, написать в фигурных скобках name и закрыть фигурные скобки.",
							"// 19. Передать в окружение переменную age",
							"// В адресной строке или в Params вместо значения 35 открыть две фигурные скобки, написать в фигурных скобках salary и закрыть фигурные скобки.",
							"// 20. Передать в окружение переменную salary",
							"// В адресной строке или в Params вместо значения 10000 открыть две фигурные скобки, написать в фигурных скобках salary и закрыть фигурные скобки.",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"    var json_resp = JSON.parse(responseBody);",
							"console.log(json_resp);",
							"    var salary = json_resp.salary;",
							"console.log(salary);",
							"for (var i=0; i  < salary.length; i++) {",
							"    console.log(\"цикл === \" + i + \" : \" + salary[i])",
							"};",
							"//или",
							"for (var i=0; i  < salary.length; i=i+1) {",
							"    console.log(\"циклұ === \" + i + \" : \" + salary[i])",
							"};",
							"",
							"for (let i of salary) {",
							"    console.log(\"цикл === \" , i)",
							"//или",
							"console.log(\"циклө === \" + i)",
							"};",
							"",
							"//просто посмотреть какой массив и цикл",
							"var arr_len = salary.length;",
							"console.log(\"массив цикл === \" +arr_len);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// [Forwarded from 25_QA_Channel]",
							"// http://162.55.220.72:5005/user_info_2",
							"",
							"// 1. Вставить параметр salary из окружения в request",
							"//В Body request открыть две фигурные скобки, написать в фигурных скобках salary вместо значения 10000 и закрыть фигурные скобки.",
							"",
							"// 2. Вставить параметр age из окружения в age",
							"//В Body request открыть две фигурные скобки, написать в фигурных скобках age вместо значения 35 и закрыть фигурные скобки.",
							"",
							"// 3. Вставить параметр name из окружения в name",
							"//В Body request открыть две фигурные скобки, написать в фигурных скобках Assyelle вместо значения 35 и закрыть фигурные скобки.",
							"",
							"// 4. Отправить запрос.",
							"// http://162.55.220.72:5005/user_info_2",
							"",
							"// 5. Статус код 200",
							"",
							"// 6. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"//var resp_sal = jsonData.salary;",
							"",
							"// 7. Спарсить request.",
							"var req_body = request.data;",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test('Response has start_qa_salary', function() {",
							"  pm.expect(jsonData).to.have.property('start_qa_salary');",
							"});",
							"console.log('start_qa_salary');",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test('Response has qa_salary_after_6_months', function() {",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_6_months');",
							"});",
							"console.log('qa_salary_after_6_months');",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test('Response has qa_salary_after_12_months', function() {",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_12_months');",
							"});",
							"console.log('qa_salary_after_12_months');",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test('Response has qa_salary_after_1.5_year', function() {",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');",
							"});",
							"console.log('qa_salary_after_1.5_year');",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test('Response has qa_salary_after_3.5_years', function() {",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');",
							"});",
							"console.log('qa_salary_after_3.5_years');",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test('Response has person', function() {",
							"  pm.expect(jsonData).to.have.property('person');",
							"});",
							"console.log('person');",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"    var req_sal = request.data.salary",
							"pm.test('start_qa_salary eql salary', function() {",
							"  pm.expect(+jsonData.start_qa_salary).to.eql(+req_sal);",
							"});",
							"console.log(\"pikpik === \", req_sal);",
							"console.log(\"pikpika === \", jsonData.start_qa_salary);",
							"",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test('qa_salary_after_6_months eql salary', function() {",
							"  pm.expect(+jsonData.qa_salary_after_6_months).to.eql(+req_sal * 2);",
							"});",
							"console.log(\"pikpik === \", req_sal * 2);",
							"console.log(\"pikpiku === \", jsonData.qa_salary_after_6_months);",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test('qa_salary_after_12_months eql salary', function() {",
							"  pm.expect(+jsonData.qa_salary_after_12_months).to.eql(+req_sal * 2.7);",
							"});",
							"console.log(\"pikpik === \", req_sal * 2.7);",
							"console.log(\"pikpiku === \", jsonData.qa_salary_after_12_months);",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test('qa_salary_after_1.5_year eql salary', function() {",
							"  pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_sal * 3.3);",
							"});",
							"console.log(\"pikpik === \", req_sal * 3.3);",
							"console.log(\"pikpike === \", jsonData[\"qa_salary_after_1.5_year\"]);",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test('qa_salary_after_3.5_years eql salary', function() {",
							"  pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_sal * 3.8);",
							"});",
							"console.log(\"pikpik === \", req_sal * 3.8);",
							"console.log(\"pikpike === \", jsonData[\"qa_salary_after_3.5_years\"]);",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test('u_name[1] eql salary', function() {",
							"  pm.expect(+jsonData.person.u_name[1]).to.eql(+req_sal);",
							"});",
							"console.log(\"balet === \", req_sal);",
							"console.log(\"balet === \", jsonData.person.u_name[1]);",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"var req_age = request.data.age;",
							"pm.test('u_age eql age', function() {",
							"  pm.expect(+jsonData.person.u_age).to.eql(+req_age);",
							"});",
							"console.log(\"tour piquet === \", req_age);",
							"console.log(\"tour piquet === \", jsonData.person.u_age);",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test('u_salary_5_years eql salary', function() {",
							"  pm.expect(+jsonData.person.u_salary_5_years).to.eql(+req_sal * 4.2);",
							"});",
							"console.log(\"piruet === \", req_sal * 4.2);",
							"console.log(\"piruet === \", jsonData.person.u_salary_5_years);",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Assyelle",
							"disabled": true
						},
						{
							"key": "age",
							"value": "35",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "10000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}